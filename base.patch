commit 1243d225a68d13c1ecb85853a9b5309caf898ee2
Author: Abhishek Kanike <abkanike@iu.edu>
Date:   Fri Sep 14 15:44:59 2018 -0400

    Basic Strategy Pattern

diff --git a/src/com/behavior/BoxLayoutXAxisBehavior.java b/src/com/behavior/BoxLayoutXAxisBehavior.java
new file mode 100644
index 0000000..49b4e24
--- /dev/null
+++ b/src/com/behavior/BoxLayoutXAxisBehavior.java
@@ -0,0 +1,18 @@
+package com.behavior;
+
+import java.awt.Dimension;
+
+import javax.swing.BoxLayout;
+
+import com.infrastruture.AbstractPanel;
+import com.infrastruture.LayoutBehavior;
+
+public class BoxLayoutXAxisBehavior implements LayoutBehavior {
+
+	@Override
+	public void updateLayoutBehavior(AbstractPanel abstractPanel, int width, int height) {
+		abstractPanel.setLayout(new BoxLayout(abstractPanel, BoxLayout.X_AXIS));
+		abstractPanel.setPreferredSize(new Dimension(width, height));
+	}
+
+}
diff --git a/src/com/behavior/BoxLayoutYAxisBehavior.java b/src/com/behavior/BoxLayoutYAxisBehavior.java
new file mode 100644
index 0000000..028c01b
--- /dev/null
+++ b/src/com/behavior/BoxLayoutYAxisBehavior.java
@@ -0,0 +1,18 @@
+package com.behavior;
+
+import java.awt.Dimension;
+
+import javax.swing.BoxLayout;
+
+import com.infrastruture.AbstractPanel;
+import com.infrastruture.LayoutBehavior;
+
+public class BoxLayoutYAxisBehavior implements LayoutBehavior {
+
+	@Override
+	public void updateLayoutBehavior(AbstractPanel abstractPanel, int width, int height) {
+		
+		abstractPanel.setLayout(new BoxLayout(abstractPanel, BoxLayout.Y_AXIS));
+		abstractPanel.setPreferredSize(new Dimension(width, height));
+	}
+}
diff --git a/src/com/behavior/FlowLayoutBehavior.java b/src/com/behavior/FlowLayoutBehavior.java
new file mode 100644
index 0000000..87b96da
--- /dev/null
+++ b/src/com/behavior/FlowLayoutBehavior.java
@@ -0,0 +1,16 @@
+package com.behavior;
+
+import java.awt.Dimension;
+import java.awt.FlowLayout;
+
+import com.infrastruture.AbstractPanel;
+import com.infrastruture.LayoutBehavior;
+
+public class FlowLayoutBehavior implements LayoutBehavior {
+	@Override
+	public void updateLayoutBehavior(AbstractPanel abstractPanel, int width, int height) {
+		abstractPanel.setLayout(new FlowLayout());
+		abstractPanel.setPreferredSize(new Dimension(width, height));
+	}
+
+}
diff --git a/src/com/breakout/Breakout.java b/src/com/breakout/Breakout.java
index 135ad5b..2da1891 100644
--- a/src/com/breakout/Breakout.java
+++ b/src/com/breakout/Breakout.java
@@ -1,5 +1,6 @@
 package com.breakout;
 
+import java.awt.Dimension;
 import java.util.ArrayList;
 
 import javax.swing.SwingUtilities;
@@ -20,6 +21,7 @@ import com.infrastruture.*;
 import com.timer.BreakoutTimer;
 import com.ui.GUI;
 import com.ui.GamePanel;
+import com.ui.MainPanel;
 import com.ui.StaticPanel;
 
 public class Breakout {
@@ -31,12 +33,12 @@ public class Breakout {
 		
 		Circle c = new Circle(Constants.BALL_RADIUS, Constants.BALL_POS_X,Constants.BALL_POS_Y);
 		Ball ball = new Ball(c, new Coordinate(Constants.BALL_DELTA_X, Constants.BALL_DELTA_Y), Constants.BALL_COLOR);
-		boardPanel.addElement(ball);
+		boardPanel.addComponent(ball);
         
         
 		Rectangle r =new Rectangle(Constants.PADDLE_WIDTH,Constants.PADDLE_HEIGHT,Constants.PADDLE_POS_X, Constants.PADDLE_POS_Y);
 		Paddle paddle = new Paddle(r,Constants.PADDLE_DELTA_X,Constants.PADDLE_COLOR);
-		boardPanel.addElement(paddle);
+		boardPanel.addComponent(paddle);
 		
 		
 		ArrayList<Brick> bricks = new ArrayList<>();
@@ -46,18 +48,29 @@ public class Breakout {
 			r = new Rectangle(Constants.BRICK_WIDTH, Constants.BRICK_HEIGHT, brickPosX, brickPosY);
 			Brick brick = new Brick(r , true,Constants.BRICK_COLOR);
 			bricks.add(brick);
-			boardPanel.addElement(brick);
+			boardPanel.addComponent(brick);
 			
 			brickPosX += 2* Constants.BRICK_WIDTH+ Constants.BRICK_DISTANCE_X ;
 			brickPosY +=  Constants.BRICK_DISTANCE_Y;
 		}
 		
 		Clock clock = new Clock();
+		clock.setPreferredSize(new Dimension(Constants.TIMER_PANEL_WIDTH, Constants.TIMER_PANEL_WIDTH));
+		clock.setMaximumSize(new Dimension(Constants.TIMER_PANEL_WIDTH, Constants.TIMER_PANEL_WIDTH));
+//		clock.setPreferredSize(new Dimension(50, 50));
+//		clock.setMaximumSize(new Dimension(50, 50));
 		StaticPanel timerPanel = new StaticPanel();
-		timerPanel.addElement(clock);
+
+		timerPanel.addComponent(clock);
+		
 		
+		MainPanel mainPanel = new MainPanel();
+		mainPanel.addComponent(timerPanel);
+		mainPanel.addComponent(boardPanel);
+
+		GUI gui = new GUI(mainPanel, boardPanel,timerPanel);
 		
-		GUI gui = new GUI(boardPanel,timerPanel);
+		gui.addComponent(mainPanel);
 		
 		CollisionChecker checker = new CollisionChecker();
 		
@@ -66,6 +79,8 @@ public class Breakout {
 		gui.addDriver(driver);
 		observable.startTimer();
 		gui.setVisible(true);
+//		gui.changeUI();
+		System.out.println("Print from Breakout");
 		gui.draw(null);
 		if(isRestart)
 			observable.registerObserver(driver);
diff --git a/src/com/component/Ball.java b/src/com/component/Ball.java
index f0e9da7..ad221be 100644
--- a/src/com/component/Ball.java
+++ b/src/com/component/Ball.java
@@ -5,6 +5,10 @@ import java.awt.Graphics;
 
 import org.apache.log4j.Logger;
 import org.json.simple.JsonObject;
+import javax.swing.JComponent;
+
+//import org.json.JSONObject;
+import org.json.simple.parser.JSONParser;
 
 import com.dimension.Circle;
 import com.dimension.Coordinate;
@@ -12,7 +16,8 @@ import com.infrastruture.Constants;
 import com.infrastruture.Element;
 
 
-public class Ball implements Element{
+public class Ball extends JComponent implements Element{
+	
 	protected Logger log = Logger.getLogger(Ball.class);
     private Circle circle;
     private Coordinate delta;
diff --git a/src/com/component/Brick.java b/src/com/component/Brick.java
index 909df3e..0f217cf 100644
--- a/src/com/component/Brick.java
+++ b/src/com/component/Brick.java
@@ -5,12 +5,17 @@ import java.awt.Graphics;
 
 import org.apache.log4j.Logger;
 import org.json.simple.JsonObject;
+import javax.swing.JComponent;
+
+//import org.json.JSONObject;
+import org.json.simple.parser.JSONParser;
 
 import com.dimension.Rectangle;
 import com.infrastruture.Constants;
 import com.infrastruture.Element;
 
-public class Brick implements Element{
+public class Brick extends JComponent implements Element{
+
 	protected Logger log = Logger.getLogger(Brick.class);
 	private Rectangle rectangle;
 	private boolean visible;
diff --git a/src/com/component/Clock.java b/src/com/component/Clock.java
index c03f177..fb44c42 100644
--- a/src/com/component/Clock.java
+++ b/src/com/component/Clock.java
@@ -6,11 +6,16 @@ import java.awt.Graphics;
 
 import org.apache.log4j.Logger;
 import org.json.simple.JsonObject;
+import javax.swing.JComponent;
+
+//import org.json.JSONObject;
+import org.json.simple.parser.JSONParser;
 
 import com.infrastruture.*;
 
 
-public class Clock implements Element{
+public class Clock extends JComponent implements Element{
+
 	protected Logger log = Logger.getLogger(Clock.class);
 	private long milisecondsElapsed;
 	private JsonObject jsonObject;
@@ -31,9 +36,13 @@ public class Clock implements Element{
 				
 		// TODO center box around the time 
 		g.drawRect(0, 150, 250, 100);
+//		g.drawRect(getX(), getY(), getWidth(), getHeight());
+//		g.drawRect(0, 150, 250, 100);
+		g.drawRect(0, 0, Constants.TIMER_PANEL_WIDTH, Constants.TIMER_PANEL_WIDTH);
+//		g.setColor(Color.WHITE);
 		g.setFont(new Font("Arial", Font.BOLD, 40));
 		String time = getTime();
-		g.drawString(time, 15, 200);
+		g.drawString(time, 30, 80);
 	}
 
 	@Override
diff --git a/src/com/component/Paddle.java b/src/com/component/Paddle.java
index 137e54b..d908f6c 100644
--- a/src/com/component/Paddle.java
+++ b/src/com/component/Paddle.java
@@ -4,13 +4,17 @@ import java.awt.Graphics;
 
 import org.apache.log4j.Logger;
 import org.json.simple.JsonObject;
+import javax.swing.JComponent;
+
+//import org.json.JSONObject;
+import org.json.simple.parser.JSONParser;
 
 import com.dimension.Coordinate;
 import com.dimension.Rectangle;
 import com.infrastruture.Constants;
 import com.infrastruture.Element;
 
-public class Paddle implements Element{
+public class Paddle extends JComponent implements Element{
 	protected Logger log = Logger.getLogger(Paddle.class);
 	private Rectangle rectangle;
 	private int deltaX;
diff --git a/src/com/controller/GameController.java b/src/com/controller/GameController.java
index 1a3438b..7dfd259 100644
--- a/src/com/controller/GameController.java
+++ b/src/com/controller/GameController.java
@@ -73,7 +73,6 @@ public class GameController implements Observer, KeyListener,ActionListener{
     }
 	private void initCommands()
 	{
-		
 		int i=0;
 		for(Brick b : bricks)
 		{
@@ -89,7 +88,6 @@ public class GameController implements Observer, KeyListener,ActionListener{
 
 	@Override
 	public void update() {
-		
 		//initCommands();
 		timerCommand.execute();
 		ballActCommand.execute();
@@ -132,10 +130,10 @@ public class GameController implements Observer, KeyListener,ActionListener{
 		//Check collision between ball and paddle
 		result = collisionChecker.checkCollisionBetweenCircleAndRectangle(ball.getCircle(), paddle.getRectangle());
 		changeBallDirectionCommand(result);
-		//doubt 
-//		gui.draw(null);
-		 gui.changeUI();
+//		System.out.println("Print from GameController");
+		gui.draw(null);
 	}
+
 	private void changeBallDirectionCommand(Direction result) {
 		
 		if(result == Direction.X) {
@@ -309,6 +307,10 @@ public class GameController implements Observer, KeyListener,ActionListener{
 			load();
 			gui.changeFocus();
 			gui.changeUI();
+		}else if(commandText.equals("layout")) {
+//			gui.changeFocus();
+			gui.modifyLayout();
+			gui.draw(null);
 		}
 	}
 	
diff --git a/src/com/infrastruture/AbstractPanel.java b/src/com/infrastruture/AbstractPanel.java
new file mode 100644
index 0000000..aeb1b71
--- /dev/null
+++ b/src/com/infrastruture/AbstractPanel.java
@@ -0,0 +1,16 @@
+package com.infrastruture;
+
+import javax.swing.JPanel;
+
+@SuppressWarnings("serial")
+public abstract class AbstractPanel extends JPanel {
+	LayoutBehavior layoutBehavior;
+	
+	public void setLayoutBehavior(LayoutBehavior layoutBehavior) {
+		this.layoutBehavior = layoutBehavior; 
+	}
+	
+	public void performUpdateLayout(AbstractPanel abstractPanel, int width, int height) {
+		layoutBehavior.updateLayoutBehavior(abstractPanel, width, height);
+	}
+}
diff --git a/src/com/infrastruture/LayoutBehavior.java b/src/com/infrastruture/LayoutBehavior.java
new file mode 100644
index 0000000..87a4b33
--- /dev/null
+++ b/src/com/infrastruture/LayoutBehavior.java
@@ -0,0 +1,5 @@
+package com.infrastruture;
+
+public interface LayoutBehavior {
+	public void updateLayoutBehavior(AbstractPanel abstractPanel, int width, int height);
+}
diff --git a/src/com/ui/GUI.java b/src/com/ui/GUI.java
index aafc13a..0b737d7 100644
--- a/src/com/ui/GUI.java
+++ b/src/com/ui/GUI.java
@@ -22,7 +22,10 @@ import org.apache.log4j.Logger;
 import org.json.simple.JsonObject;
 import org.json.simple.parser.JSONParser;
 
+import com.behavior.BoxLayoutYAxisBehavior;
+import com.behavior.FlowLayoutBehavior;
 import com.controller.GameController;
+import com.infrastruture.AbstractPanel;
 import com.infrastruture.Constants;
 import com.infrastruture.Element;
 
@@ -34,11 +37,11 @@ public class GUI extends JFrame implements Element{
 	private ArrayList<Element> elementList;
 	private JLabel exitLabel;
 	private GameController driver;
-	private JPanel mainPanel;
+	private MainPanel mainPanel;
 	private StaticPanel timerPanel;
 	private JsonObject jsonObject;
 	private JSONParser parser;
-	
+
 	public GUI() {
 		boardPanel = new GamePanel();
 		timerPanel = new StaticPanel();
@@ -53,37 +56,27 @@ public class GUI extends JFrame implements Element{
 		elementList = new ArrayList<>();
 		initializeUI();
 	}
-	private void createBoardPanel() {
+	public GUI(MainPanel mainPanel, GamePanel boardPanel, StaticPanel timerPanel) {
+		elementList = new ArrayList<>();
+		this.mainPanel = mainPanel;
+		this.boardPanel = boardPanel;
+		this.timerPanel = timerPanel;
+		initializeUI();
+	}
 
-		boardPanel.setLayout(new GridBagLayout());
-        boardPanel.setPreferredSize(new Dimension(Constants.BOARD_PANEL_WIDTH,Constants.BOARD_PANEL_HEIGHT));
-	    boardPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY));
-	    boardPanel.setMaximumSize(new Dimension(Constants.BOARD_PANEL_WIDTH,Constants.BOARD_PANEL_HEIGHT));
-		boardPanel.setBackground(Color.black);
+	private void initializeUI() {
 		
-		exitLabel = new JLabel();
-		exitLabel.setForeground(Color.WHITE);
-		exitLabel.setAlignmentX(SwingConstants.CENTER);
-		exitLabel.setAlignmentY(SwingConstants.CENTER);
-		Font font = new Font("Helvetica", Font.BOLD,50);
+//       mainPanel = new JPanel();
+//       mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.X_AXIS));
+       
+//       mainPanel.add(timerPanel);
+//       mainPanel.add(boardPanel);
+        
+//	   add(mainPanel);
 		
-		exitLabel.setFont(font);
-		boardPanel.add(exitLabel);
-		boardPanel.setMaximumSize(new Dimension(Constants.FRAME_WIDTH,Constants.FRAME_HEIGHT));
-		mainPanel.add(boardPanel);
-		elementList.add(boardPanel);
-	}
-	private void initializeUI() {
-       mainPanel = new JPanel();
-       mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.X_AXIS));       
-       mainPanel.add(timerPanel);
-       elementList.add(timerPanel);
-       mainPanel.add(boardPanel);    
-       createBoardPanel();
-       add(mainPanel);
-	   mainPanel.setPreferredSize(new Dimension(Constants.FRAME_WIDTH,Constants.FRAME_HEIGHT));
-	   mainPanel.setFocusable(true);
-	   mainPanel.requestFocusInWindow();
+//	   mainPanel.setPreferredSize(new Dimension(Constants.FRAME_WIDTH,Constants.FRAME_HEIGHT));
+//	   mainPanel.setFocusable(true);
+//	   mainPanel.requestFocusInWindow();
 	   setSize(Constants.FRAME_WIDTH,Constants.FRAME_HEIGHT);
 	   setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 	   setResizable(false);	
@@ -103,8 +96,8 @@ public class GUI extends JFrame implements Element{
 		this.driver = driver;
 		mainPanel.addKeyListener(driver);
         timerPanel.createButtons(driver);
-	
 	}
+
 	public void changeFocus()
 	{
 		mainPanel.requestFocus();
@@ -113,7 +106,9 @@ public class GUI extends JFrame implements Element{
 
 	@Override
 	public void draw(Graphics g) {
-				
+		for(Element element : elementList) {
+			element.draw(g);
+		}
 	}
 
 	@Override
@@ -122,7 +117,9 @@ public class GUI extends JFrame implements Element{
 
 	@Override
 	public void addComponent(Element e) {
-	
+		System.out.println("Add component in GUI (frame)");
+		add((AbstractPanel)e);
+		elementList.add(e);
 	}
 
 	@Override
@@ -192,4 +189,19 @@ public class GUI extends JFrame implements Element{
 		}
 		return brickCount;
 	}		
+
+	public void modifyLayout() {
+		// TODO Auto-generated method stub
+		JPanel contentPane = (JPanel) getContentPane();
+		System.out.println("Modifying Layout");
+		mainPanel.setLayoutBehavior(new BoxLayoutYAxisBehavior());
+		mainPanel.performUpdateLayout(mainPanel, Constants.FRAME_WIDTH,Constants.FRAME_HEIGHT);
+		
+		timerPanel.setLayoutBehavior(new FlowLayoutBehavior());
+		timerPanel.performUpdateLayout(timerPanel, Constants.FRAME_WIDTH,Constants.TIMER_PANEL_WIDTH);
+		
+		boardPanel.setLayoutBehavior(new FlowLayoutBehavior());
+		boardPanel.performUpdateLayout(boardPanel, Constants.FRAME_WIDTH,Constants.BOARD_PANEL_WIDTH);
+		contentPane.revalidate();
+	}
 }
diff --git a/src/com/ui/GamePanel.java b/src/com/ui/GamePanel.java
index 8fd8b36..ed7c97d 100644
--- a/src/com/ui/GamePanel.java
+++ b/src/com/ui/GamePanel.java
@@ -1,7 +1,12 @@
 package com.ui;
 
+import java.awt.Graphics;
+
+import com.behavior.FlowLayoutBehavior;
+import com.image.*;
 import java.util.ArrayList;
 import java.awt.Color;
+import java.awt.Component;
 import java.awt.Dimension;
 import java.awt.Graphics;
 import java.awt.Graphics2D;
@@ -20,12 +25,13 @@ import org.apache.log4j.Logger;
 import org.json.simple.JsonObject;
 import org.json.simple.parser.JSONParser;
 
+import com.infrastruture.AbstractPanel;
 import com.infrastruture.Constants;
 import com.infrastruture.Element;
 
 
 @SuppressWarnings("serial")
-public class GamePanel extends JPanel implements Element {
+public class GamePanel extends AbstractPanel implements Element {
 	protected Logger log = Logger.getLogger(GamePanel.class);
 	private BufferedImage image;
 	private ArrayList<Element> elements;
@@ -43,16 +49,45 @@ public class GamePanel extends JPanel implements Element {
         }
         setLayout();
 	}
+
+	/*
+	@Override
+	public void performUpdateLayout(AbstractPanel abstractPanel, int width, int height) {
+		super.performUpdateLayout(abstractPanel, Constants.BOARD_PANEL_WIDTH, Constants.BOARD_PANEL_HEIGHT);
+	    setBorder(BorderFactory.createLineBorder(Color.GRAY));
+	    setMaximumSize(new Dimension(Constants.BOARD_PANEL_WIDTH,Constants.BOARD_PANEL_HEIGHT));
+		setBackground(Color.black);
+		setMaximumSize(new Dimension(Constants.FRAME_WIDTH,Constants.FRAME_HEIGHT));
+	}
+	*/
 	
 	public void setLayout() {
-		
-		setLayout(new GridBagLayout());
-        setPreferredSize(new Dimension(Constants.BOARD_PANEL_WIDTH,Constants.BOARD_PANEL_HEIGHT));
-	    setBorder(BorderFactory.createLineBorder(Color.GRAY));
+//		setLayout(new GridBagLayout());
+//        setPreferredSize(new Dimension(Constants.BOARD_PANEL_WIDTH,Constants.BOARD_PANEL_HEIGHT));
+		setLayoutBehavior(new FlowLayoutBehavior());
+		performUpdateLayout(this, Constants.BOARD_PANEL_WIDTH,Constants.BOARD_PANEL_HEIGHT);
+
+		/*
+		setBorder(BorderFactory.createLineBorder(Color.GRAY));
 	    setMaximumSize(new Dimension(Constants.BOARD_PANEL_WIDTH,Constants.BOARD_PANEL_HEIGHT));
 		setBackground(Color.black);
 		setMaximumSize(new Dimension(Constants.FRAME_WIDTH,Constants.FRAME_HEIGHT));
+		*/
 	}
+
+	
+	public void performUpdateLayout(AbstractPanel abstractPanel, int width, int height) {
+		super.performUpdateLayout(abstractPanel, width, height);
+        try {
+            image = ImageIO.read(new File("./src/com/image/nature.jpg"));
+            image = resize(image, width, height);
+        } catch (IOException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }		
+	}
+	
+	
 	private BufferedImage resize(BufferedImage img, int width, int height) {
         Image tmp = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
         BufferedImage resized = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
@@ -75,6 +110,7 @@ public class GamePanel extends JPanel implements Element {
 	
 	@Override
 	public void paintComponent(Graphics g){
+//		System.out.println("GamePanel::paintComponent");
 		super.paintComponent(g);
 		if (image != null) {
 	        g.drawImage(image, 0, 0, this);
@@ -89,6 +125,7 @@ public class GamePanel extends JPanel implements Element {
 
 	@Override
 	public void draw(Graphics g) {
+//		System.out.println("GamePanel::draw");
 		repaint();
 	}
 
@@ -100,8 +137,11 @@ public class GamePanel extends JPanel implements Element {
 	}
 
 	public void addComponent(Element e) {
+//		System.out.println("Add component in GamePanel (boardPanel)");
+		this.add((Component)e);
 		elements.add(e);
 	}
+	
 
 	@Override
 	public void removeComponent(Element e) {
diff --git a/src/com/ui/MainPanel.java b/src/com/ui/MainPanel.java
new file mode 100644
index 0000000..3510ea2
--- /dev/null
+++ b/src/com/ui/MainPanel.java
@@ -0,0 +1,87 @@
+package com.ui;
+
+import java.awt.Graphics;
+import java.awt.Panel;
+import java.util.ArrayList;
+
+//import org.json.JSONObject;
+
+import org.json.simple.JsonObject;
+
+import com.behavior.BoxLayoutXAxisBehavior;
+import com.infrastruture.AbstractPanel;
+import com.infrastruture.Constants;
+import com.infrastruture.Element;
+
+@SuppressWarnings("serial")
+public class MainPanel extends AbstractPanel implements Element {
+
+	private ArrayList<Element> elements;
+
+	
+	public MainPanel() {
+        elements = new ArrayList<>();
+		setLayoutBehavior(new BoxLayoutXAxisBehavior());
+		performUpdateLayout(this, Constants.FRAME_WIDTH,Constants.FRAME_HEIGHT);
+//		performUpdateLayout(this, Constants.BOARD_PANEL_WIDTH,Constants.BOARD_PANEL_HEIGHT);
+		setFocusable(true);
+		requestFocusInWindow();
+	}
+
+	@Override
+	public void paintComponent(Graphics g){
+		super.paintComponent(g);
+		for(Element component : elements)
+		{
+			component.draw(g);
+		}
+	}
+	
+	@Override
+	public void draw(Graphics g) {
+		repaint();
+//		System.out.println("MainPanel::draw");
+	}
+
+	@Override
+	public void reset() {
+		for(Element element : elements) {
+			element.reset();
+		}
+	}
+
+	@Override
+	public void addComponent(Element e) {
+//		System.out.println("Add component in MainPanel (mainPanel)");
+		elements.add(e);
+		this.add((AbstractPanel)e);
+	}
+
+	@Override
+	public void removeComponent(Element e) {
+		elements.remove(e);
+	}
+
+	@Override
+	public JsonObject save() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	@Override
+	public int load(Object object) {
+		// TODO Auto-generated method stub
+		return 0;
+	}
+
+	/*
+	@Override
+	public void load() {
+	}
+
+	@Override
+	public JSONObject save() {
+		return null;
+	}
+	*/
+}
diff --git a/src/com/ui/StaticPanel.java b/src/com/ui/StaticPanel.java
index 74fa784..ca569f9 100644
--- a/src/com/ui/StaticPanel.java
+++ b/src/com/ui/StaticPanel.java
@@ -1,23 +1,31 @@
 package com.ui;
 
+import java.awt.Component;
 import java.awt.Dimension;
 import java.awt.Graphics;
+import java.awt.Graphics2D;
 import java.util.ArrayList;
 
+import javax.swing.Box;
 import javax.swing.JButton;
+import javax.swing.JComponent;
 import javax.swing.JPanel;
 import javax.swing.JLabel;
 
 import org.apache.log4j.Logger;
 import org.json.simple.JsonObject;
 
+import com.behavior.BoxLayoutXAxisBehavior;
+import com.behavior.BoxLayoutYAxisBehavior;
+import com.component.Clock;
 import com.controller.GameController;
+import com.infrastruture.AbstractPanel;
 import com.infrastruture.Constants;
 import com.infrastruture.Element;
 
 
 @SuppressWarnings("serial")
-public class StaticPanel extends JPanel implements Element{
+public class StaticPanel extends AbstractPanel implements Element{
 	protected Logger log = Logger.getLogger(StaticPanel.class);
 	private JLabel score;
 	private GameController driver;
@@ -25,8 +33,11 @@ public class StaticPanel extends JPanel implements Element{
 	private JsonObject jsonObject;
 	
 	public StaticPanel() {
-		this.setPreferredSize(new Dimension(Constants.TIMER_PANEL_WIDTH, Constants.TIMER_PANEL_HEIGHT));
-        this.setMaximumSize(new Dimension(Constants.TIMER_PANEL_WIDTH,Constants.TIMER_PANEL_HEIGHT));
+		setLayoutBehavior(new BoxLayoutYAxisBehavior());
+		performUpdateLayout(this, Constants.TIMER_PANEL_WIDTH,Constants.TIMER_PANEL_HEIGHT);
+
+//		this.setPreferredSize(new Dimension(Constants.TIMER_PANEL_WIDTH, Constants.TIMER_PANEL_HEIGHT));
+//        this.setMaximumSize(new Dimension(Constants.TIMER_PANEL_WIDTH,Constants.TIMER_PANEL_HEIGHT));
         elements = new ArrayList<>();
 	}
 	public ArrayList<Element> getElements(){
@@ -51,6 +62,7 @@ public class StaticPanel extends JPanel implements Element{
 	    createPause();
 	    createSave();
 	    createLoad();
+	    createLayout();
 	}
 	
 	
@@ -59,7 +71,12 @@ public class StaticPanel extends JPanel implements Element{
 		replayButton.setActionCommand("replay");
 		replayButton.addActionListener(driver);
 		replayButton.setVisible(true);
+		replayButton.setAlignmentX(CENTER_ALIGNMENT);
+		replayButton.setAlignmentY(CENTER_ALIGNMENT);
+
+		this.add(Box.createRigidArea(new Dimension(30,30)));
 		this.add(replayButton);
+		this.add(Box.createRigidArea(new Dimension(5,5)));
 	}
 	
 	public void createUndo() {
@@ -67,7 +84,12 @@ public class StaticPanel extends JPanel implements Element{
 		undoButton.setActionCommand("undo");
 		undoButton.addActionListener(driver);
 		undoButton.setVisible(true);
+		undoButton.setAlignmentX(CENTER_ALIGNMENT);
+		undoButton.setAlignmentY(CENTER_ALIGNMENT);
+
+		this.add(Box.createRigidArea(new Dimension(5,5)));
 		this.add(undoButton);
+		this.add(Box.createRigidArea(new Dimension(5,5)));
 	}
 	
 	public void createStart() {
@@ -75,7 +97,12 @@ public class StaticPanel extends JPanel implements Element{
      	startButton.setActionCommand("start");
      	startButton.addActionListener(driver);
 		startButton.setVisible(true);
+		startButton.setAlignmentX(CENTER_ALIGNMENT);
+		startButton.setAlignmentY(CENTER_ALIGNMENT);
+
+		this.add(Box.createRigidArea(new Dimension(5,5)));
 		this.add(startButton);
+		this.add(Box.createRigidArea(new Dimension(5,5)));
 	}
 	
 	public void createPause() {
@@ -83,7 +110,12 @@ public class StaticPanel extends JPanel implements Element{
      	startButton.setActionCommand("pause");
      	startButton.addActionListener(driver);
 		startButton.setVisible(true);
+		startButton.setAlignmentX(CENTER_ALIGNMENT);
+		startButton.setAlignmentY(CENTER_ALIGNMENT);
+		
+		this.add(Box.createRigidArea(new Dimension(5,5)));
 		this.add(startButton);
+		this.add(Box.createRigidArea(new Dimension(5,5)));
 	}
 	
 	public void createSave() {
@@ -102,17 +134,44 @@ public class StaticPanel extends JPanel implements Element{
 		this.add(loadButton);
 	}
 
+	public void createLayout() {
+		JButton layoutButton = new JButton("Layout");
+		layoutButton.setActionCommand("layout");
+		layoutButton.addActionListener(driver);
+		layoutButton.setVisible(true);
+		layoutButton.setAlignmentX(CENTER_ALIGNMENT);
+		layoutButton.setAlignmentY(CENTER_ALIGNMENT);
+		
+		this.add(Box.createRigidArea(new Dimension(5,5)));
+		this.add(layoutButton);
+		this.add(Box.createRigidArea(new Dimension(5,5)));
+	}
+
+	
 	@Override
 	public void paintComponent(Graphics g){
+//		System.out.println("StaticPanel::paintComponent");
+
 		super.paintComponent(g);
 		for(Element component : elements)
 		{
-			component.draw(g);
+			double X = this.getComponent(0).getX();
+			double Y = this.getComponent(0).getY();
+//			System.out.println("X: " + X + " Y: " + Y);
+//			System.out.println("Width: " + Integer.toString(this.getComponent(0).getWidth()));
+//			System.out.println("Height: " + Integer.toString(this.getComponent(0).getHeight()));
+			Graphics2D g2d = (Graphics2D) g.create();
+			g2d.translate(X, Y); 
+			component.draw(g2d);
+			g2d.dispose();
 		}
+		
 	}
 	
 	
 	public void addComponent(Element e) {
+//		System.out.println("Add component in Static(timerPanel)");
+		this.add((Component)e);
 		elements.add(e);
 	}
 
@@ -123,6 +182,7 @@ public class StaticPanel extends JPanel implements Element{
 
 	@Override
 	public void draw(Graphics g) {
+//		System.out.println("StaticPanel::draw");
 		repaint();
 	}
 	@Override
